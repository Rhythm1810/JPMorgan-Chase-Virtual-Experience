From 1722c510489035a25cacc5b2dd9205c9d233abb2 Mon Sep 17 00:00:00 2001
From: Rhythm Bhatt <rhythmybhatt@gmail.com>
Date: Wed, 1 Dec 2021 22:45:56 +0530
Subject: [PATCH] Create a Patch File

---
 src/App.tsx   | 22 +++++++++++++++++++---
 src/Graph.tsx | 14 ++++++++++++--
 2 files changed, 31 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..86ad7c0 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph)
+    {
+    return (<Graph data={this.state.data}/>)  //graph doesn't render until a user clicks the 'Start Streaming butto'
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0 ;
+    const interval = setInterval(()=> {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
+
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data:serverResponds,
+        showGraph : true, });
     });
-  }
+    x++;
+    if(x>1000)
+    {
+      clearInterval(interval);
+    }
+  },100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..b7460c5 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,16 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      { elem.load(this.table);
+        elem.setAttribute('view' , 'y_line');
+        elem.setAttribute('column-pivots' , '["stock"]');
+        elem.setAttribute('row-pivots' , '["timestamp"]');
+        elem.setAttribute('columns' , 'top_ask_price');
+        elem.setAttribute('aggregates' , '{"stock":"distinct count" , "top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
+        
+         
+
+      }
     }
   }
 
-- 
2.33.1.windows.1

